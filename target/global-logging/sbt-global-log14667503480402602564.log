[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\tienguye\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\tienguye\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 20.0.2)
[debug]       Load.loadUnit: plugins took 78.7714ms
[debug]       Load.loadUnit: defsScala took 0.328ms
[debug] [Loading] Scanning directory C:\Users\tienguye\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tienguye\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.9924 ms
[debug]           Load.resolveProject(global-plugins) took 34.8115ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\tienguye\.sbt\1.0\plugins, plugins: List(<none>))) took 75.5337ms
[debug] [Loading] Done in C:\Users\tienguye\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 100.2678ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1464ms
[debug]     Load.loadUnit(file:/C:/Users/tienguye/.sbt/1.0/plugins/, ...) took 189.0131ms
[debug]   Load.apply: load took 380.7979ms
[debug]   Load.apply: resolveProjects took 5.4617ms
[debug]   Load.apply: finalTransforms took 80.1767ms
[debug]   Load.apply: config.delegates took 9.8098ms
[debug]   Load.apply: Def.make(settings)... took 755.4197ms
[debug]   Load.apply: structureIndex took 173.2781ms
[debug]   Load.apply: mkStreams took 2.0735ms
[info] loading global plugins from C:\Users\tienguye\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3044.7022ms
[debug]           Load.loadUnit: plugins took 56.6265ms
[debug]           Load.loadUnit: defsScala took 0.0097ms
[debug] [Loading] Scanning directory C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp\project
[debug]             Load.loadUnit: mkEval took 9.5104ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.0865 ms
[info] loading settings for project miniapp-build from idea.sbt ...
[debug]               Load.resolveProject(miniapp-build) took 5.3387ms
[debug]             Load.loadTransitive: finalizeProject(Project(id miniapp-build, base: C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp\project, plugins: List(<none>))) took 9.2967ms
[debug] [Loading] Done in C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp\project, returning: (miniapp-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 212.595ms
[debug]           Load.loadUnit: cleanEvalClasses took 16.2327ms
[debug]         Load.loadUnit(file:/C:/Users/tienguye/OneDrive%20-%20Capgemini/Documents/HETIC/projet-intensif/miniApp/project/, ...) took 288.4348ms
[debug]       Load.apply: load took 291.9346ms
[debug]       Load.apply: resolveProjects took 0.2633ms
[debug]       Load.apply: finalTransforms took 32.8316ms
[debug]       Load.apply: config.delegates took 1.0761ms
[debug]       Load.apply: Def.make(settings)... took 168.62ms
[debug]       Load.apply: structureIndex took 42.7908ms
[debug]       Load.apply: mkStreams took 0.0042ms
[info] loading project definition from C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[info] compiling 1 Scala source to C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp\project\target\scala-2.12\sbt-1.0\classes ...
[info] done compiling
[debug]     Load.loadUnit: plugins took 7112.1659ms
[debug]     Load.loadUnit: defsScala took 0.0067ms
[debug] [Loading] Scanning directory C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp
[debug]       Load.loadUnit: mkEval took 0.9242ms
[debug] [Loading] Found non-root projects eventStore
[debug] [Loading] Loading project eventStore @ C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp\event-store
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.4398 ms
[debug]       Load.resolveProject(eventStore) took 62.4568ms
[debug] [Loading] Done in C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp, returning: (eventStore)
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.8267 ms
[info] loading settings for project miniapp from build.sbt ...
[debug]         Load.resolveProject(miniapp) took 13.4046ms
[debug]       Load.loadTransitive: finalizeProject(Project(id miniapp, base: C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp, aggregate: List(ProjectRef(file:/C:/Users/tienguye/OneDrive%20-%20Capgemini/Documents/HETIC/projet-intensif/miniApp/,eventStore)), plugins: List(<none>))) took 18.6686ms
[debug] [Loading] Done in C:\Users\tienguye\OneDrive - Capgemini\Documents\HETIC\projet-intensif\miniApp, returning: (miniapp, eventStore)
[debug]     Load.loadUnit: loadedProjectsRaw took 3861.1869ms
[debug]     Load.loadUnit: cleanEvalClasses took 50.8214ms
[debug]   Load.loadUnit(file:/C:/Users/tienguye/OneDrive%20-%20Capgemini/Documents/HETIC/projet-intensif/miniApp/, ...) took 11027.4945ms
[debug] Load.apply: load took 11036.6387ms
[debug] Load.apply: resolveProjects took 0.297ms
[debug] Load.apply: finalTransforms took 88.1971ms
[debug] Load.apply: config.delegates took 1.1269ms
[debug] Load.apply: Def.make(settings)... took 257.5549ms
[debug] Load.apply: structureIndex took 115.0632ms
[debug] Load.apply: mkStreams took 0.0042ms
[info] set current project to miniapp (in build file:/C:/Users/tienguye/OneDrive%20-%20Capgemini/Documents/HETIC/projet-intensif/miniApp/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56910 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56910, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile and 1 others.
[info] 	Run `last` for details.
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[debug] 	eventStore / Compile / compile
[debug] 	eventStore / Test / compile
[info] Reapplying settings...
[info] set current project to miniapp (in build file:/C:/Users/tienguye/OneDrive%20-%20Capgemini/Documents/HETIC/projet-intensif/miniApp/)
[debug] > Exec(idea-shell, None, None)
